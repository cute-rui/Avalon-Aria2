// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package aria2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Aria2AgentClient is the client API for Aria2Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Aria2AgentClient interface {
	// rpc ChangeGlobalOptions (Param) returns (Result);
	// rpc ChangePosition (Param) returns (Result);
	// rpc ChangeTaskOptions (Param) returns (Result);
	// rpc GetFilesInfo (Param) returns (Result);
	// rpc GetGlobalOptions (Param) returns (Result);
	// rpc GetGlobalStat (Param) returns (Result);
	// rpc GetTaskOptions (Param) returns (Result);
	// rpc IsFinished (Param) returns (Result);
	// rpc AddDownloadTask (Param) returns (Result);
	// rpc Pause (Param) returns (Result);
	// rpc Unpause (Param) returns (Result);
	// rpc Remove (Param) returns (Result);
	// rpc RemoveDownloadResult (Param) returns (Result);
	// rpc TellActive (Param) returns (Result);
	// rpc TellStatus (Param) returns (Result);
	// rpc TellStopped (Param) returns (Result);
	// rpc TellWaiting (Param) returns (Result);
	AwaitDownload(ctx context.Context, in *Param, opts ...grpc.CallOption) (Aria2Agent_AwaitDownloadClient, error)
	CheckDownload(ctx context.Context, in *Param, opts ...grpc.CallOption) (*Result, error)
}

type aria2AgentClient struct {
	cc grpc.ClientConnInterface
}

func NewAria2AgentClient(cc grpc.ClientConnInterface) Aria2AgentClient {
	return &aria2AgentClient{cc}
}

func (c *aria2AgentClient) AwaitDownload(ctx context.Context, in *Param, opts ...grpc.CallOption) (Aria2Agent_AwaitDownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Aria2Agent_ServiceDesc.Streams[0], "/aria2.Aria2Agent/AwaitDownload", opts...)
	if err != nil {
		return nil, err
	}
	x := &aria2AgentAwaitDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Aria2Agent_AwaitDownloadClient interface {
	Recv() (*Result, error)
	grpc.ClientStream
}

type aria2AgentAwaitDownloadClient struct {
	grpc.ClientStream
}

func (x *aria2AgentAwaitDownloadClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aria2AgentClient) CheckDownload(ctx context.Context, in *Param, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/aria2.Aria2Agent/CheckDownload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Aria2AgentServer is the server API for Aria2Agent service.
// All implementations must embed UnimplementedAria2AgentServer
// for forward compatibility
type Aria2AgentServer interface {
	// rpc ChangeGlobalOptions (Param) returns (Result);
	// rpc ChangePosition (Param) returns (Result);
	// rpc ChangeTaskOptions (Param) returns (Result);
	// rpc GetFilesInfo (Param) returns (Result);
	// rpc GetGlobalOptions (Param) returns (Result);
	// rpc GetGlobalStat (Param) returns (Result);
	// rpc GetTaskOptions (Param) returns (Result);
	// rpc IsFinished (Param) returns (Result);
	// rpc AddDownloadTask (Param) returns (Result);
	// rpc Pause (Param) returns (Result);
	// rpc Unpause (Param) returns (Result);
	// rpc Remove (Param) returns (Result);
	// rpc RemoveDownloadResult (Param) returns (Result);
	// rpc TellActive (Param) returns (Result);
	// rpc TellStatus (Param) returns (Result);
	// rpc TellStopped (Param) returns (Result);
	// rpc TellWaiting (Param) returns (Result);
	AwaitDownload(*Param, Aria2Agent_AwaitDownloadServer) error
	CheckDownload(context.Context, *Param) (*Result, error)
	mustEmbedUnimplementedAria2AgentServer()
}

// UnimplementedAria2AgentServer must be embedded to have forward compatible implementations.
type UnimplementedAria2AgentServer struct {
}

func (UnimplementedAria2AgentServer) AwaitDownload(*Param, Aria2Agent_AwaitDownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method AwaitDownload not implemented")
}
func (UnimplementedAria2AgentServer) CheckDownload(context.Context, *Param) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDownload not implemented")
}
func (UnimplementedAria2AgentServer) mustEmbedUnimplementedAria2AgentServer() {}

// UnsafeAria2AgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Aria2AgentServer will
// result in compilation errors.
type UnsafeAria2AgentServer interface {
	mustEmbedUnimplementedAria2AgentServer()
}

func RegisterAria2AgentServer(s grpc.ServiceRegistrar, srv Aria2AgentServer) {
	s.RegisterService(&Aria2Agent_ServiceDesc, srv)
}

func _Aria2Agent_AwaitDownload_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Param)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(Aria2AgentServer).AwaitDownload(m, &aria2AgentAwaitDownloadServer{stream})
}

type Aria2Agent_AwaitDownloadServer interface {
	Send(*Result) error
	grpc.ServerStream
}

type aria2AgentAwaitDownloadServer struct {
	grpc.ServerStream
}

func (x *aria2AgentAwaitDownloadServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func _Aria2Agent_CheckDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Param)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Aria2AgentServer).CheckDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aria2.Aria2Agent/CheckDownload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Aria2AgentServer).CheckDownload(ctx, req.(*Param))
	}
	return interceptor(ctx, in, info, handler)
}

// Aria2Agent_ServiceDesc is the grpc.ServiceDesc for Aria2Agent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Aria2Agent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aria2.Aria2Agent",
	HandlerType: (*Aria2AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckDownload",
			Handler:    _Aria2Agent_CheckDownload_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AwaitDownload",
			Handler:       _Aria2Agent_AwaitDownload_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "aria2.proto",
}
